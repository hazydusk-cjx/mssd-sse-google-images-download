from google_images_download import google_images_downloadimport os, errnoimport shutildef silent_remove_download_folder(folder):    try:        shutil.rmtree(folder)    except OSError as e:        if e.errno != errno.ENOENT:            raise e        return False    return Trueimport unittestclass google_images_download_TestBlackBox(unittest.TestCase):    def test_parsing_TC_BB1(self):          argumnets = {            "keywords": "Polar bears",            "limit": -5,   # This should be the same as Zero             "print_urls": False            }        self.expected = ({'Polar bears': []}, 0)        response = google_images_download.googleimagesdownload()        #self.assertEqual(expectedresult, response.download(argumnets))        result = response.download(argumnets)        self.assertEqual(self.expected, result)                print(f"Cleaning up all files downloaded by test {__name__}...")        silent_remove_download_folder(os.path.join(os.path.realpath('.'), 'downloads'))    def test_parsing_TC_BB2(self):          argumnets = {            "keywords": "Polar bears",            "limit": 5,            "print_urls": False,            "no_directory": False,            "image_directory": "Group6"*10000            }        self.expected = ({'Polar bears': []}, 0)        response = google_images_download.googleimagesdownload()        #self.assertEqual(expectedresult, response.download(argumnets))        with self.assertRaises(OSError) as ctx:            result = response.download(argumnets)        self.assertEqual("[Errno 63] File name too long: 'download[59999 chars]up6", str(ctx.exception))            print(f"Cleaning up all files downloaded by test {__name__}...")        silent_remove_download_folder(os.path.join(os.path.realpath('.'), 'downloads'))    def test_parsing_TC_BB3(self):          argumnets = {            "keywords": "Polar bears",            "limit": 5,            "print_urls": False,            "size": ">800*600",            "exact_size": "800,600"            }        self.expected = ({'Polar bears': []}, 0)        response = google_images_download.googleimagesdownload()        #self.assertEqual(expectedresult, response.download(argumnets))        with self.assertRaises(ValueError) as ctx:            result = response.download(argumnets)        self.assertEqual('Either "size" or "exact_size" should be used in a query. Both cannot be used at the same time.', str(ctx.exception))            print(f"Cleaning up all files downloaded by test {__name__}...")        silent_remove_download_folder(os.path.join(os.path.realpath('.'), 'downloads'))    def test_parsing_TC_BB4(self):          argumnets = {            "keywords": "Panda",            "limit": 5,            "print_urls": False,            "offset": 6              }        self.expected = ({'Panda': []}, 5)        response = google_images_download.googleimagesdownload()        result = response.download(argumnets)        #print(result)        self.assertEqual(self.expected, result)            print(f"Cleaning up all files downloaded by test {__name__}...")        silent_remove_download_folder(os.path.join(os.path.realpath('.'), 'downloads'))    def test_parsing_TC_BB5(self):          argumnets = {            "keywords": "Apple",            "limit": 5,            "print_urls": False,            "prefix": "../../../hackedfolder/"            }        self.expected = ({'Apple': []}, 5)        response = google_images_download.googleimagesdownload()        result = response.download(argumnets)        #print(result)        self.assertEqual(self.expected, result)            print(f"Cleaning up all files downloaded by test {__name__}...")        #silent_remove_download_folder(os.path.join(os.path.realpath('.'), 'downloads'))suite1 = unittest.TestLoader().loadTestsFromTestCase(google_images_download_TestBlackBox)if __name__ == "__main__":    #unittest.TextTestRunner().run(suite1_5)    singletest = unittest.TestSuite()    singletest.addTest(google_images_download_TestBlackBox('test_parsing_TC_BB5'))    unittest.TextTestRunner().run(singletest)