import atherisimport refrom google_images_download import GoogleImagesDownloadwith atheris.instrument_imports():    import sys    import warnings# Suppress all warnings.#warnings.simplefilter("ignore")response = GoogleImagesDownload()@atheris.instrument_funcdef TestOneInput(input_bytes):    regex = re.compile('[^a-zA-Z0-9]')#    fdp1 = atheris.FuzzedDataProvider(input_bytes[0:8])#    data1 = regex.sub('', fdp1.ConsumeUnicode(sys.maxsize))#    data1 = fdp1.ConsumeUnicode(sys.maxsize)#    data6 = fdp6.ConsumeBool()    fdp1 = atheris.FuzzedDataProvider(input_bytes[0:8])    fuzz_keywords = regex.sub('', fdp1.ConsumeString(1))    fdp2 = atheris.FuzzedDataProvider(input_bytes[8:16])    fuzz_keywords_from_file = fdp2.ConsumeString(8)    fdp3 = atheris.FuzzedDataProvider(input_bytes[16:24])    fuzz_prefix_keywords = fdp3.ConsumeString(8)    fdp4 = atheris.FuzzedDataProvider(input_bytes[24:32])    fuzz_suffix_keywords = fdp4.ConsumeString(8)    fdp5 = atheris.FuzzedDataProvider(input_bytes[32:40])    fuzz_limit = fdp5.ConsumeIntInRange(1,5)    fdp6 = atheris.FuzzedDataProvider(input_bytes[40:48])    fuzz_format = fdp6.ConsumeString(8)    fdp7 = atheris.FuzzedDataProvider(input_bytes[48:56])    fuzz_color = fdp7.ConsumeString(8)    fdp8 = atheris.FuzzedDataProvider(input_bytes[56:64])    fuzz_color_type = fdp8.ConsumeString(8)    fdp9 = atheris.FuzzedDataProvider(input_bytes[64:72])    fuzz_usage_rights = fdp9.ConsumeString(8)    fdp10 = atheris.FuzzedDataProvider(input_bytes[72:80])    fuzz_size = fdp10.ConsumeString(8)    fdp11 = atheris.FuzzedDataProvider(input_bytes[80:88])    fuzz_exact_size = fdp11.ConsumeString(8)    fdp12 = atheris.FuzzedDataProvider(input_bytes[88:96])    fuzz_aspect_ratio = fdp12.ConsumeString(8)    fdp13 = atheris.FuzzedDataProvider(input_bytes[96:104])    fuzz_type = fdp13.ConsumeString(8)    fdp14 = atheris.FuzzedDataProvider(input_bytes[104:112])    fuzz_time = fdp14.ConsumeString(8)    fdp15 = atheris.FuzzedDataProvider(input_bytes[112:120])    fuzz_time_range = fdp15.ConsumeString(8)    fdp16 = atheris.FuzzedDataProvider(input_bytes[120:128])    fuzz_delay = fdp16.ConsumeString(8)    fdp17 = atheris.FuzzedDataProvider(input_bytes[128:136])    fuzz_url = fdp17.ConsumeString(8)    fdp18 = atheris.FuzzedDataProvider(input_bytes[136:144])    fuzz_single_image = fdp18.ConsumeString(8)    fdp19 = atheris.FuzzedDataProvider(input_bytes[144:152])    fuzz_output_directory = fdp19.ConsumeString(8)    fdp20 = atheris.FuzzedDataProvider(input_bytes[152:160])    fuzz_image_directory = fdp20.ConsumeString(8)    fdp21 = atheris.FuzzedDataProvider(input_bytes[160:168])    fuzz_no_directory = fdp21.ConsumeBool()    fdp22 = atheris.FuzzedDataProvider(input_bytes[168:176])    fuzz_proxy = fdp22.ConsumeString(8)    fdp23 = atheris.FuzzedDataProvider(input_bytes[176:184])    fuzz_similar_images = fdp23.ConsumeString(8)    fdp24 = atheris.FuzzedDataProvider(input_bytes[184:192])    fuzz_specific_site = fdp24.ConsumeString(8)    fdp25 = atheris.FuzzedDataProvider(input_bytes[192:200])    fuzz_print_urls = fdp25.ConsumeString(8)    fdp26 = atheris.FuzzedDataProvider(input_bytes[200:208])    fuzz_print_size = fdp26.ConsumeString(8)    fdp27 = atheris.FuzzedDataProvider(input_bytes[208:216])    fuzz_print_paths = fdp27.ConsumeString(8)    fdp28 = atheris.FuzzedDataProvider(input_bytes[216:224])    fuzz_metadata = fdp28.ConsumeString(8)    fdp29 = atheris.FuzzedDataProvider(input_bytes[224:232])    fuzz_extract_metadata = fdp29.ConsumeString(8)    fdp30 = atheris.FuzzedDataProvider(input_bytes[232:240])    fuzz_socket_timeout = fdp30.ConsumeString(8)    fdp31 = atheris.FuzzedDataProvider(input_bytes[240:248])    fuzz_thumbnail = fdp31.ConsumeString(8)    fdp32 = atheris.FuzzedDataProvider(input_bytes[248:256])    fuzz_thumbnail_only = fdp32.ConsumeString(8)    fdp33 = atheris.FuzzedDataProvider(input_bytes[256:264])    fuzz_language = fdp33.ConsumeString(8)    fdp34 = atheris.FuzzedDataProvider(input_bytes[264:272])    fuzz_prefix = fdp34.ConsumeString(8)    fdp35 = atheris.FuzzedDataProvider(input_bytes[272:280])    fuzz_chromedriver = fdp35.ConsumeString(8)    fdp36 = atheris.FuzzedDataProvider(input_bytes[280:288])    fuzz_related_images = fdp36.ConsumeString(8)    fdp37 = atheris.FuzzedDataProvider(input_bytes[288:296])    fuzz_safe_search = fdp37.ConsumeString(8)    fdp38 = atheris.FuzzedDataProvider(input_bytes[296:304])    fuzz_no_numbering = fdp38.ConsumeString(8)    fdp39 = atheris.FuzzedDataProvider(input_bytes[304:312])    fuzz_offset = fdp39.ConsumeIntInRange(1,6)    fdp40 = atheris.FuzzedDataProvider(input_bytes[312:320])    fuzz_no_download = fdp40.ConsumeString(8)    fdp41 = atheris.FuzzedDataProvider(input_bytes[320:328])    fuzz_save_source = fdp41.ConsumeString(8)    fdp42 = atheris.FuzzedDataProvider(input_bytes[328:336])    fuzz_silent_mode = fdp42.ConsumeBool()    fdp43 = atheris.FuzzedDataProvider(input_bytes[336:344])    fuzz_ignore_urls = fdp43.ConsumeBool()    if( (len(fuzz_keywords) == 0) or (len(fuzz_prefix) == 0) ):        return    arguments = {        "keywords" : fuzz_keywords,##        "keywords_from_file" : fuzz_keywords_from_file,#        "single_image" : fuzz_single_image,#        "similar_images" : fuzz_similar_images,  #not working#        "url" : fuzz_url,        "prefix_keywords" : fuzz_prefix_keywords,        "suffix_keywords" : fuzz_suffix_keywords,        "limit" : fuzz_limit,#        "format" : fuzz_format,  #need to fix bug#        "color" : fuzz_color,#        "color_type" : fuzz_color_type,#        "usage_rights" : fuzz_usage_rights,#        "size" : fuzz_size,##        "exact_size" : fuzz_exact_size,#        "aspect_ratio" : fuzz_aspect_ratio,#        "type" : fuzz_type,#        "time" : fuzz_time,##        "time_range" : fuzz_time_range,#        "delay" : fuzz_delay,        "output_directory" : fuzz_output_directory,        "image_directory" : fuzz_image_directory,##        "no_directory" : fuzz_no_directory,#        "proxy" : fuzz_proxy,#        "specific_site" : fuzz_specific_site,#        "print_urls" : fuzz_print_urls,#        "print_size" : fuzz_print_size,#        "print_paths" : fuzz_print_paths,        "related_images" : fuzz_related_images, # name is not correct        "metadata" : fuzz_metadata,#        "extract_metadata" : fuzz_extract_metadata,        "socket_timeout" : fuzz_socket_timeout,#        "thumbnail" : fuzz_thumbnail,#        "thumbnail_only" : fuzz_thumbnail_only,#        "language" : fuzz_language,        "prefix" : fuzz_prefix,#        "chromedriver" : fuzz_chromedriver,#        "safe_search" : fuzz_safe_search,#        "no_numbering" : fuzz_no_numbering,        "offset" : fuzz_offset,     # Expect integer value#        "save_source" : fuzz_save_source,        "silent_mode" : fuzz_silent_mode,        "no_download" : "1", #fuzz_no_download,        "ignore_urls" : fuzz_ignore_urls    }               try:        iterator = response.download(arguments)        for _ in iterator:            pass            except Exception:        input_type = str(type(fuzz_keywords))        codepoints = [hex(ord(x)) for x in fuzz_keywords]        sys.stderr.write(            "Input was {input_type}: {data}\nCodepoints: {codepoints}".format(                input_type=input_type, data=fuzz_keywords, codepoints=codepoints))        raisedef main():    #atheris.instrument_all()    atheris.Setup(sys.argv, TestOneInput)    atheris.Fuzz()if __name__ == "__main__":    main()